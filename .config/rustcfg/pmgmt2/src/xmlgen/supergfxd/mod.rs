//! # D-Bus interface proxy for: `org.supergfxctl.Daemon`
//!
//! This code was generated by `zbus-xmlgen` `5.0.1` from D-Bus introspection data.
//! Source: `Interface '/org/supergfxctl/Gfx' from service 'org.supergfxctl.Daemon' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
mod types;
pub use types::*;
#[proxy(
    interface = "org.supergfxctl.Daemon",
    default_service = "org.supergfxctl.Daemon",
    default_path = "/org/supergfxctl/Gfx",
    gen_blocking = false
)]
pub trait Daemon {
    /// Config method
    fn config(&self) -> zbus::Result<(u32, bool, bool, bool, bool, u64, u32)>;

    /// Mode method
    fn mode(&self) -> zbus::Result<GfxMode>;

    /// PendingMode method
    fn pending_mode(&self) -> zbus::Result<GfxMode>;

    /// PendingUserAction method
    fn pending_user_action(&self) -> zbus::Result<u32>;

    /// Power method
    fn power(&self) -> zbus::Result<GfxPower>;

    /// SetConfig method
    fn set_config(&self, config: &(u32, bool, bool, bool, bool, u64, u32)) -> zbus::Result<()>;

    /// SetMode method
    fn set_mode(&self, mode: GfxMode) -> zbus::Result<GfxMode>;

    /// Supported method
    fn supported(&self) -> zbus::Result<Vec<GfxMode>>;

    /// Vendor method
    fn vendor(&self) -> zbus::Result<String>;

    /// Version method
    fn version(&self) -> zbus::Result<String>;

    /// NotifyAction signal
    #[zbus(signal)]
    fn notify_action(&self, action: u32) -> zbus::Result<()>;

    /// NotifyGfx signal
    #[zbus(signal)]
    fn notify_gfx(&self, vendor: u32) -> zbus::Result<()>;

    /// NotifyGfxStatus signal
    #[zbus(signal)]
    fn notify_gfx_status(&self, status: u32) -> zbus::Result<()>;
}
