//! # DBus interface proxies for: `org.mpris.MediaPlayer2`, `com.github.altdesktop.playerctld`, `org.mpris.MediaPlayer2.Playlists`, `org.mpris.MediaPlayer2.Player`, `org.mpris.MediaPlayer2.TrackList`
//!
//! This code was generated by `zbus-xmlgen` `3.1.1` from DBus introspection data.
//! Source: `Interface '/org/mpris/MediaPlayer2' from service 'org.mpris.MediaPlayer2.playerctld' on session bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(
    interface = "org.mpris.MediaPlayer2",
    default_service = "org.mpris.MediaPlayer2.playerctld",
    default_path = "/org/mpris/MediaPlayer2"
)]
trait MediaPlayer2 {
    /// Quit method
    fn quit(&self) -> zbus::Result<()>;

    /// Raise method
    fn raise(&self) -> zbus::Result<()>;

    /// CanQuit property
    #[dbus_proxy(property)]
    fn can_quit(&self) -> zbus::Result<bool>;

    /// CanRaise property
    #[dbus_proxy(property)]
    fn can_raise(&self) -> zbus::Result<bool>;

    /// CanSetFullscreen property
    #[dbus_proxy(property)]
    fn can_set_fullscreen(&self) -> zbus::Result<bool>;

    /// DesktopEntry property
    #[dbus_proxy(property)]
    fn desktop_entry(&self) -> zbus::Result<String>;

    /// Fullscreen property
    #[dbus_proxy(property)]
    fn fullscreen(&self) -> zbus::Result<bool>;
    fn set_fullscreen(&self, value: bool) -> zbus::Result<()>;

    /// HasTrackList property
    #[dbus_proxy(property)]
    fn has_track_list(&self) -> zbus::Result<bool>;

    /// Identity property
    #[dbus_proxy(property)]
    fn identity(&self) -> zbus::Result<String>;

    /// SupportedMimeTypes property
    #[dbus_proxy(property)]
    fn supported_mime_types(&self) -> zbus::Result<Vec<String>>;

    /// SupportedUriSchemes property
    #[dbus_proxy(property)]
    fn supported_uri_schemes(&self) -> zbus::Result<Vec<String>>;
}

#[dbus_proxy(
    interface = "com.github.altdesktop.playerctld",
    default_service = "org.mpris.MediaPlayer2.playerctld",
    default_path = "/org/mpris/MediaPlayer2"
)]
trait playerctld {
    /// Shift method
    fn shift(&self) -> zbus::Result<String>;

    /// Unshift method
    fn unshift(&self) -> zbus::Result<String>;

    /// ActivePlayerChangeBegin signal
    #[dbus_proxy(signal)]
    fn active_player_change_begin(&self, Name: &str) -> zbus::Result<()>;

    /// ActivePlayerChangeEnd signal
    #[dbus_proxy(signal)]
    fn active_player_change_end(&self, Name: &str) -> zbus::Result<()>;

    /// PlayerNames property
    #[dbus_proxy(property)]
    fn player_names(&self) -> zbus::Result<Vec<String>>;
}

#[dbus_proxy(
    interface = "org.mpris.MediaPlayer2.Playlists",
    default_service = "org.mpris.MediaPlayer2.playerctld",
    default_path = "/org/mpris/MediaPlayer2"
)]
trait Playlists {
    /// ActivatePlaylist method
    fn activate_playlist(&self, PlaylistId: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// GetPlaylists method
    fn get_playlists(
        &self,
        Index: u32,
        MaxCount: u32,
        Order: &str,
        ReverseOrder: bool,
    ) -> zbus::Result<Vec<(zbus::zvariant::OwnedObjectPath, String, String)>>;

    /// PlaylistChanged signal
    #[dbus_proxy(signal)]
    fn playlist_changed(
        &self,
        Playlist: (zbus::zvariant::ObjectPath<'_>, &str, &str),
    ) -> zbus::Result<()>;

    /// ActivePlaylist property
    #[dbus_proxy(property)]
    fn active_playlist(
        &self,
    ) -> zbus::Result<(bool, (zbus::zvariant::OwnedObjectPath, String, String))>;

    /// Orderings property
    #[dbus_proxy(property)]
    fn orderings(&self) -> zbus::Result<Vec<String>>;

    /// PlaylistCount property
    #[dbus_proxy(property)]
    fn playlist_count(&self) -> zbus::Result<u32>;
}

#[dbus_proxy(
    interface = "org.mpris.MediaPlayer2.Player",
    default_service = "org.mpris.MediaPlayer2.playerctld",
    default_path = "/org/mpris/MediaPlayer2"
)]
trait Player {
    /// Next method
    fn next(&self) -> zbus::Result<()>;

    /// OpenUri method
    fn open_uri(&self, Uri: &str) -> zbus::Result<()>;

    /// Pause method
    fn pause(&self) -> zbus::Result<()>;

    /// Play method
    fn play(&self) -> zbus::Result<()>;

    /// PlayPause method
    fn play_pause(&self) -> zbus::Result<()>;

    /// Previous method
    fn previous(&self) -> zbus::Result<()>;

    /// Seek method
    fn seek(&self, Offset: i64) -> zbus::Result<()>;

    /// SetPosition method
    fn set_position(
        &self,
        TrackId: &zbus::zvariant::ObjectPath<'_>,
        Offset: i64,
    ) -> zbus::Result<()>;

    /// Stop method
    fn stop(&self) -> zbus::Result<()>;

    /// Seeked signal
    #[dbus_proxy(signal)]
    fn seeked(&self, Position: i64) -> zbus::Result<()>;

    /// CanControl property
    #[dbus_proxy(property)]
    fn can_control(&self) -> zbus::Result<bool>;

    /// CanGoNext property
    #[dbus_proxy(property)]
    fn can_go_next(&self) -> zbus::Result<bool>;

    /// CanGoPrevious property
    #[dbus_proxy(property)]
    fn can_go_previous(&self) -> zbus::Result<bool>;

    /// CanPause property
    #[dbus_proxy(property)]
    fn can_pause(&self) -> zbus::Result<bool>;

    /// CanPlay property
    #[dbus_proxy(property)]
    fn can_play(&self) -> zbus::Result<bool>;

    /// CanSeek property
    #[dbus_proxy(property)]
    fn can_seek(&self) -> zbus::Result<bool>;

    /// LoopStatus property
    #[dbus_proxy(property)]
    fn loop_status(&self) -> zbus::Result<String>;
    fn set_loop_status(&self, value: &str) -> zbus::Result<()>;

    /// MaximumRate property
    #[dbus_proxy(property)]
    fn maximum_rate(&self) -> zbus::Result<f64>;

    /// Metadata property
    #[dbus_proxy(property)]
    fn metadata(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// MinimumRate property
    #[dbus_proxy(property)]
    fn minimum_rate(&self) -> zbus::Result<f64>;

    /// PlaybackStatus property
    #[dbus_proxy(property)]
    fn playback_status(&self) -> zbus::Result<String>;

    /// Position property
    #[dbus_proxy(property)]
    fn position(&self) -> zbus::Result<i64>;

    /// Rate property
    #[dbus_proxy(property)]
    fn rate(&self) -> zbus::Result<f64>;
    fn set_rate(&self, value: f64) -> zbus::Result<()>;

    /// Shuffle property
    #[dbus_proxy(property)]
    fn shuffle(&self) -> zbus::Result<bool>;
    fn set_shuffle(&self, value: bool) -> zbus::Result<()>;

    /// Volume property
    #[dbus_proxy(property)]
    fn volume(&self) -> zbus::Result<f64>;
    fn set_volume(&self, value: f64) -> zbus::Result<()>;
}

#[dbus_proxy(
    interface = "org.mpris.MediaPlayer2.TrackList",
    default_service = "org.mpris.MediaPlayer2.playerctld",
    default_path = "/org/mpris/MediaPlayer2"
)]
trait TrackList {
    /// AddTrack method
    fn add_track(
        &self,
        Uri: &str,
        AfterTrack: &zbus::zvariant::ObjectPath<'_>,
        SetAsCurrent: bool,
    ) -> zbus::Result<()>;

    /// GetTracksMetadata method
    fn get_tracks_metadata(
        &self,
        TrackIds: &[zbus::zvariant::ObjectPath<'_>],
    ) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

    /// GoTo method
    fn go_to(&self, TrackId: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// RemoveTrack method
    fn remove_track(&self, TrackId: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// TrackAdded signal
    #[dbus_proxy(signal)]
    fn track_added(
        &self,
        Metadata: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        AfterTrack: zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// TrackListReplaced signal
    #[dbus_proxy(signal)]
    fn track_list_replaced(
        &self,
        Tracks: &[zbus::zvariant::ObjectPath<'_>],
        CurrentTrack: zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// TrackMetadataChanged signal
    #[dbus_proxy(signal)]
    fn track_metadata_changed(
        &self,
        TrackId: zbus::zvariant::ObjectPath<'_>,
        Metadata: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// TrackRemoved signal
    #[dbus_proxy(signal)]
    fn track_removed(&self, TrackId: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// CanEditTracks property
    #[dbus_proxy(property)]
    fn can_edit_tracks(&self) -> zbus::Result<bool>;

    /// Tracks property
    #[dbus_proxy(property)]
    fn tracks(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;
}
