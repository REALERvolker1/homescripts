#compdef hyprctl

_hyprctl_cmd_1 () {
    printf '%s\n' /usr/share/icons/*/cursors | cut -d/ -f5
}

_hyprctl_cmd_0 () {
    hyprctl devices -j | awk '/^"keyboards"/,/^\],$/' | sed -n 's/.*"name": "\(.*\)".*/\1/p'
}

_hyprctl_cmd_2 () {
    hyprctl instances -j | sed -n 's/.*"instance": "\(.*\)".*/\1/p'
}

_hyprctl_spec_1 () {
    _path_files
}

_hyprctl () {
    local -a literals=("movegroupwindow" "kill" "mouse" "focuswindowbyclass" "animations" "focuswindow" "fullscreen" "movecurrentworkspacetomonitor" "binds" "devices" "instances" "monitor" "movecursor" "keyword" "layers" "dpms" "setcursor" "bottom" "globalshortcuts" "disable" "splitratio" "changegroupactive" "pin" "pseudo" "3" "wallpaper" "exit" "5" "focuscurrentorlast" "fakefullscreen" "monitors" "preload" "swapactiveworkspaces" "splash" "moveoutofgroup" "setignoregrouplock" "version" "-j" "focusmonitor" "4" "movewindowpixel" "resizeactive" "getoption" "lockactivegroup" "global" "movetoworkspacesilent" "switchxkblayout" "all" "submap" "exec" "swapwindow" "activewindow" "moveactive" "bezier" "load" "dispatch" "windowrulev2" "moveintogroup" "1" "2" "source" "focusurgentorlast" "swapnext" "movewindow" "centerwindow" "execr" "movecursortocorner" "--instance" "togglefloating" "setprop" "movetoworkspace" "animation" "togglegroup" "layoutmsg" "-i" "hyprpaper" "--batch" "toggleopaque" "reload" "top" "workspaces" "plugin" "unload" "0" "togglesplit" "bind" "activeworkspace" "windowrule" "pass" "workspaceopt" "cyclenext" "alterzorder" "closewindow" "notify" "-1" "forcerendererreload" "decorations" "env" "moveworkspacetomonitor" "renameworkspace" "clients" "lockgroups" "layouts" "bringactivetotop" "seterror" "wsbind" "prev" "focusworkspaceoncurrentmonitor" "movefocus" "exec-once" "killactive" "workspacerules" "workspace" "list" "cursorpos" "togglespecialworkspace" "layerrule" "unbind" "denywindowfromgroup" "movewindoworgroup" "next" "resizewindowpixel" "blurls")

    local -A descriptions
    descriptions[2]="kill an app by clicking on it"
    descriptions[5]="list animations and beziers (not in --help)"
    descriptions[9]="list all keybindings"
    descriptions[10]="list all connected input devices"
    descriptions[11]="list running Hyprland instances"
    descriptions[14]="execute a keyword"
    descriptions[15]="list all layers"
    descriptions[17]="set cursor theme"
    descriptions[19]="list all global shortcuts"
    descriptions[25]="error"
    descriptions[28]="ok"
    descriptions[31]="list all outputs with their properties"
    descriptions[34]="print current random splash"
    descriptions[37]="print Hyprland version"
    descriptions[38]="JSON output"
    descriptions[40]="confused"
    descriptions[43]="print value of config option"
    descriptions[47]="switch keyboard layout"
    descriptions[52]="print active window name"
    descriptions[56]="run a dispatcher"
    descriptions[59]="info"
    descriptions[60]="hint"
    descriptions[68]="use specified Hyprland instance"
    descriptions[70]="set windowrule properties"
    descriptions[75]="use specified Hyprland instance"
    descriptions[77]="execute multiple commands, separated by ';'"
    descriptions[79]="reload config file"
    descriptions[81]="list all workspaces with their properties"
    descriptions[84]="warning"
    descriptions[87]="show info about active workspace"
    descriptions[94]="send notification"
    descriptions[95]="no icon"
    descriptions[97]="TODO: Find out what this does"
    descriptions[101]="list all windows with their properties"
    descriptions[103]="List all enabled layouts"
    descriptions[105]="show text in error bar"
    descriptions[112]="Print all workspace rules"
    descriptions[115]="print cursor position"

    local -A literal_transitions
    literal_transitions[1]="([76]=2 [101]=3 [77]=3 [31]=3 [79]=3 [34]=3 [2]=3 [5]=3 [103]=3 [37]=3 [81]=3 [105]=4 [9]=3 [10]=3 [38]=1 [82]=5 [43]=6 [11]=3 [112]=3 [47]=7 [14]=8 [87]=3 [15]=3 [17]=9 [52]=3 [19]=3 [56]=10 [115]=3 [94]=11 [70]=3 [68]=12 [97]=3 [75]=12)"
    literal_transitions[2]="([26]=3 [32]=14 [83]=16)"
    literal_transitions[4]="([20]=3)"
    literal_transitions[5]="([55]=14 [114]=3 [83]=14)"
    literal_transitions[8]="([98]=3 [88]=3 [113]=3 [54]=3 [86]=3 [57]=3 [117]=3 [106]=3 [61]=14 [118]=3 [82]=3 [110]=3 [12]=3 [49]=3 [72]=3 [123]=3 [50]=3)"
    literal_transitions[10]="([1]=3 [78]=3 [3]=3 [4]=3 [6]=3 [8]=3 [7]=3 [85]=3 [13]=3 [16]=3 [89]=3 [90]=3 [91]=3 [92]=15 [93]=3 [21]=3 [22]=3 [23]=3 [24]=3 [96]=3 [27]=3 [99]=3 [29]=3 [100]=3 [102]=3 [30]=3 [104]=3 [33]=3 [35]=3 [36]=3 [39]=3 [41]=3 [42]=3 [108]=3 [44]=3 [45]=3 [46]=3 [109]=3 [111]=3 [49]=3 [50]=3 [51]=3 [113]=3 [53]=3 [58]=3 [116]=3 [62]=3 [63]=3 [119]=3 [64]=3 [65]=3 [120]=3 [66]=3 [67]=3 [69]=3 [71]=3 [73]=3 [122]=3 [74]=3)"
    literal_transitions[11]="([84]=3 [95]=3 [60]=3 [40]=3 [25]=3 [28]=3 [59]=3)"
    literal_transitions[13]="([107]=3 [121]=3)"
    literal_transitions[15]="([18]=3 [80]=3)"
    literal_transitions[16]="([48]=3)"

    local -A match_anything_transitions
    match_anything_transitions=([7]=13 [16]=3 [6]=3 [9]=3 [12]=1 [14]=3)

    declare -A subword_transitions

    local state=1
    local word_index=2
    while [[ $word_index -lt $CURRENT ]]; do
        if [[ -v "literal_transitions[$state]" ]]; then
            local -A state_transitions
            eval "state_transitions=${literal_transitions[$state]}"

            local word=${words[$word_index]}
            local word_matched=0
            for ((literal_id = 1; literal_id <= $#literals; literal_id++)); do
                if [[ ${literals[$literal_id]} = "$word" ]]; then
                    if [[ -v "state_transitions[$literal_id]" ]]; then
                        state=${state_transitions[$literal_id]}
                        word_index=$((word_index + 1))
                        word_matched=1
                        break
                    fi
                fi
            done
            if [[ $word_matched -ne 0 ]]; then
                continue
            fi
        fi

        if [[ -v "match_anything_transitions[$state]" ]]; then
            state=${match_anything_transitions[$state]}
            word_index=$((word_index + 1))
            continue
        fi

        return 1
    done

    completions_no_description_trailing_space=()
    completions_no_description_no_trailing_space=()
    completions_trailing_space=()
    suffixes_trailing_space=()
    descriptions_trailing_space=()
    completions_no_trailing_space=()
    suffixes_no_trailing_space=()
    descriptions_no_trailing_space=()

    if [[ -v "literal_transitions[$state]" ]]; then
        local -A state_transitions
        eval "state_transitions=${literal_transitions[$state]}"

        for literal_id in ${(k)state_transitions}; do
            if [[ -v "descriptions[$literal_id]" ]]; then
                completions_trailing_space+=("${literals[$literal_id]}")
                suffixes_trailing_space+=("${literals[$literal_id]}")
                descriptions_trailing_space+=("${descriptions[$literal_id]}")
            else
                completions_no_description_trailing_space+=("${literals[$literal_id]}")
            fi
        done
    fi
    local -A commands=([9]=1 [12]=2 [7]=0)

    if [[ -v "commands[$state]" ]]; then
        local command_id=${commands[$state]}
        local output=$(_hyprctl_cmd_${command_id} "${words[$CURRENT]}")
        local -a command_completions=("${(@f)output}")
        for line in ${command_completions[@]}; do
            local parts=(${(@s:	:)line})
            if [[ -v "parts[2]" ]]; then
                completions_trailing_space+=("${parts[1]}")
                suffixes_trailing_space+=("${parts[1]}")
                descriptions_trailing_space+=("${parts[2]}")
            else
                completions_no_description_trailing_space+=("${parts[1]}")
            fi
        done
    fi

    local -A specialized_commands=([16]=1 [14]=1)
    if [[ -v "specialized_commands[$state]" ]]; then
        local command_id=${specialized_commands[$state]}
        _hyprctl_spec_${command_id} ${words[$CURRENT]}
    fi

    local maxlen=0
    for suffix in ${suffixes_trailing_space[@]}; do
        if [[ ${#suffix} -gt $maxlen ]]; then
            maxlen=${#suffix}
        fi
    done
    for suffix in ${suffixes_no_trailing_space[@]}; do
        if [[ ${#suffix} -gt $maxlen ]]; then
            maxlen=${#suffix}
        fi
    done

    for ((i = 1; i <= $#suffixes_trailing_space; i++)); do
        if [[ -z ${descriptions_trailing_space[$i]} ]]; then
            descriptions_trailing_space[$i]="${(r($maxlen)( ))${suffixes_trailing_space[$i]}}"
        else
            descriptions_trailing_space[$i]="${(r($maxlen)( ))${suffixes_trailing_space[$i]}} -- ${descriptions_trailing_space[$i]}"
        fi
    done

    for ((i = 1; i <= $#suffixes_no_trailing_space; i++)); do
        if [[ -z ${descriptions_no_trailing_space[$i]} ]]; then
            descriptions_no_trailing_space[$i]="${(r($maxlen)( ))${suffixes_no_trailing_space[$i]}}"
        else
            descriptions_no_trailing_space[$i]="${(r($maxlen)( ))${suffixes_no_trailing_space[$i]}} -- ${descriptions_no_trailing_space[$i]}"
        fi
    done

    compadd -Q -a completions_no_description_trailing_space
    compadd -Q -S ' ' -a completions_no_description_no_trailing_space
    compadd -l -Q -a -d descriptions_trailing_space completions_trailing_space
    compadd -l -Q -S '' -a -d descriptions_no_trailing_space completions_no_trailing_space
    return 0
}

if [[ $ZSH_EVAL_CONTEXT =~ :file$ ]]; then
    compdef _hyprctl hyprctl
else
    _hyprctl
fi
