# vim:ft=zsh
emulate -L zsh -o extended_glob
setopt EXTENDED_GLOB

local -a plugins
local -A async_jobs
local await

if [[ ! -f ${FZF_TAB_HOME:-}/modules/Src/aloxaf/fzftab.so || ${1-} =~ --(all|lscolors|fzf|fzf-tab) ]]; then
    (
        if ((${+functions[build-fzf-tab-module]})); then
            builtin print "[0;94mCompiling fzf-tab lscolors module[0m"
            if build-fzf-tab-module &>/dev/null; then
                builtin print "[0;1;92mThe fzf-tab lscolors module has been built successfully.[0m"
            else
                builtin print "[0;1;91mErrors compiling module. Please run 'build-fzf-tab-module' in a terminal.[0m"
            fi
        fi
    ) &
    await=$!
    async_jobs[fzf_lscolors]=$await
fi


local rsmod rsmodpath
local oldcwd=$PWD
for rsmod in "$ZDOTDIR/modules"/*(@); do
    rsmodpath=${${rsmod:A}%\/target\/*}
    cd $rsmodpath || continue
    rustup override set nightly # needed to build that one zsh module library
    cargo build --release
done
cd $oldcwd

# This overwrites my own mods
# if ((${+commands[atuin]})); then
#     builtin print "[0;93mGenerating atuin init script[0m"
#     (
#         # echo '[[ "$TERM" != "linux" ]] && command -v atuin &>/dev/null || return'
#         builtin print '[[ ${TERM:-linux} != "linux" && $+commands[atuin] -eq 1 && -z ${VLKATUIN_SKIP-} ]] || return'
#         command atuin init zsh | command grep -vE '(echoti|^[[:space:]]*#|^[[:space:]]*$)' # fix home/end keys
#     ) >"$ZDOTDIR/rc.d/60-atuin.defer.zsh"
# fi

plugins+=(
    "$ZDOTDIR/rc.d/"*.zsh(.N) #"
    "$ZDOTDIR"/.z{sh{rc,env},profile}
    "$ZDOTDIR"/environ.zsh
    # fzf tab plugin
    "$ZPLUGIN_DIR/fzf-tab/"fzf-tab.zsh
    "$ZPLUGIN_DIR/fzf-tab/lib/"^*.zwc(.N)
    "$ZPLUGIN_DIR/fzf-tab/lib/zsh-ls-colors/ls-colors.zsh"
    # zsh-autosuggestions
    "$ZPLUGIN_DIR/zsh-autosuggestions/zsh-autosuggestions.zsh"
    # fast-syntax-highlighting
    "$ZPLUGIN_DIR/fast-syntax-highlighting/"fast-{{,string-}highlight,theme}
    "$ZPLUGIN_DIR/fast-syntax-highlighting/"fast-syntax-highlighting.plugin.zsh
    "$ZPLUGIN_DIR/fast-syntax-highlighting/".fast^*.zwc(.N)
)

if [[ -d "$ZPLUGIN_DIR/fast-syntax-highlighting/â†’chroma" ]]; then
    builtin print "[0;95mMoving fsyh chroma[0m"
    local i
    for i in $ZPLUGIN_DIR/fast-syntax-highlighting/**/*(.); do
        command sed -i 's/â†’chroma/chroma/g' $i
    done
    command mv "$ZPLUGIN_DIR/fast-syntax-highlighting/"{â†’,}chroma
    plugins+=( "$ZPLUGIN_DIR/fast-syntax-highlighting/chroma/"^*.zwc(.N) )
fi

local lastpath
local script
for script in $plugins; do
    if [[ ${lastpath-} != ${script:h} ]]; then
        builtin print -l '' "[0;1;32m${script:h}[0m"
        lastpath=${script:h}
    fi

    if [[ -f "$script.zwc" ]]; then
        command -p rm -f "$script.zwc" || builtin print "[0;91mFailed to remove [1m${script:t}.zwc[0m"
    fi
    [[ -f $script ]] && builtin zcompile -Uz "$script" && builtin print "[0;92mCompiled [1m${script:t}[0m"
done

if ((${#async_jobs})); then
    builtin print -l '' "[0;1mWaiting for jobs[0m"
    builtin printf "[\e[1;96m%s\e[0m]\t\e[1;93m%s\e[0m\n" "${(@kv)async_jobs}"
    builtin wait ${(@v)async_jobs}
fi
