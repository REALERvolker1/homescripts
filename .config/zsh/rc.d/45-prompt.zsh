[[ "$-" == *i* && -z $BASH_VERSION && $TERM != linux ]] || {
    return 1
    exit 1
}

# vlkprompt, generated on 10/17/23 @ 12:18:35 AM by vlk using /home/vlk/random/homescripts/bin/promptgen.sh
# Having a hard time understanding this autogenerated script?
# https://github.com/REALERvolker1/homescripts/blob/main/bin/promptgen.sh

unsetopt single_line_zle

# important variables
export VIRTUAL_ENV_DISABLE_PROMPT=1 # needed for proper python venv string
declare -A __vlkprompt_internal=(
    [right_prompt]=''
    [log_content]=''
    [log_end_color]=''
    [host_content]=''
    [host_end]=''
    [prev_pwd]=''
    [pwd]=''
    [pwd_writable]=''
    [pwd_git]=''
    [old_time]=0
    [timer_str]=''
    [venv_str]=''
    [conda_str]=''
)

if [[ -n $CONTAINER_ID || $HOSTNAME != $CURRENT_HOSTNAME || $- =~ l ]]; then
    if [[ $- =~ l ]]; then
        __vlkprompt_internal[log_content]="%K{55}%B%F{255}%(130V.. Û∞åÜ )%(130V..%k%f%b%(132V.%K{40}.%(133V.%K{220}.%(134V.%K{226}.%(1j.%K{172}.%(0?.%(138V.%K{120}.%(137V.%K{141}.%K{33})).%K{52})))))%F{55}ÓÇº%k%f%b)"
        __vlkprompt_internal[log_end_color]="%K{55}"
    else
        __vlkprompt_internal[log_content]=''
        __vlkprompt_internal[log_end_color]="%(132V.%K{40}.%(133V.%K{220}.%(134V.%K{226}.%(1j.%K{172}.%(0?.%(138V.%K{120}.%(137V.%K{141}.%K{33})).%K{52})))))"
    fi
    if [[ $HOSTNAME != $CURRENT_HOSTNAME ]]; then
        if [[ -n $CONTAINER_ID ]]; then
            __vlkprompt_internal[host_content]="%K{95}%B%F{255}%(130V.. Û∞Üç) ${CONTAINER_ID} "
            __vlkprompt_internal[host_end]="%(130V..%k%f%b${__vlkprompt_internal[log_end_color]}%F{95}ÓÇº%k%f%b)"
        else
            __vlkprompt_internal[host_content]="%K{18}%B%F{255}%(130V.. Û∞üÄ) %(130V.%m.%M) "
            __vlkprompt_internal[host_end]="%(130V..%k%f%b${__vlkprompt_internal[log_end_color]}%F{18}ÓÇº%k%f%b)"
        fi
    fi
fi

PROMPT="%(130V..%k%f%b%u%s
)${__vlkprompt_internal[host_content]}${__vlkprompt_internal[host_end]}${__vlkprompt_internal[log_content]}%(132V.%K{40}%B%F{232}%(130V.. Û±îé) \${__vlkprompt_internal[conda_str]} .)%(130V..%(132V.%k%f%b%(133V.%K{220}.%(134V.%K{226}.%(1j.%K{172}.%(0?.%(138V.%K{120}.%(137V.%K{141}.%K{33})).%K{52}))))%F{40}ÓÇº%k%f%b.))%(133V.%K{220}%B%F{232}%(130V.. Û∞å†) \${__vlkprompt_internal[venv_str]} .)%(130V..%(133V.%k%f%b%(134V.%K{226}.%(1j.%K{172}.%(0?.%(138V.%K{120}.%(137V.%K{141}.%K{33})).%K{52})))%F{220}ÓÇº%k%f%b.))%(134V.%K{226}%B%F{232}%(130V.. Û±ëÉ) \${__vlkprompt_internal[timer_str]} .)%(130V..%(134V.%k%f%b%(1j.%K{172}.%(0?.%(138V.%K{120}.%(137V.%K{141}.%K{33})).%K{52}))%F{226}ÓÇº%k%f%b.))%(1j.%K{172}%B%F{232}%(130V.. Û∞Öó) %j .)%(130V..%(1j.%k%f%b%(0?.%(138V.%K{120}.%(137V.%K{141}.%K{33})).%K{52})%F{172}ÓÇº%k%f%b.))%(0?..%K{52}%B%F{255}%(130V.. Û∞Öó) %? )%(130V..%(0?..%k%f%b%(138V.%K{120}.%(137V.%K{141}.%K{33}))%F{52}ÓÇº%k%f%b))%(138V.%K{120}%B%F{232}%(130V.. ÓüÖ).%(137V.%K{141}%B%F{232}%(130V.. Û∞ä¢).%K{33}%B%F{255}%(130V.. %(136V.ÔÅº.ÔÑî)))) %$((COLUMNS / 2))<..<%~ %k%f%b%(138V.%F{120}.%(137V.%F{141}.%F{33}))%(135V.%K{196}ÓÇº%(130V.%k%f%b%F{196}ÓÇº. %k%f%b%F{196}ÓÉÄ ).ÓÇº)%k%f%b "

PROMPT2="%k%f%b%u%s%K{93}%B%F{255} %_ %k%f%b%F{93}%(135V.%K{196}ÓÇº%k%f%b%F{196}ÓÇº.ÓÇº)%k%f%b "
PROMPT3="%k%f%b%u%s%K{89}%B%F{255} %# %k%f%b%F{89}%(135V.%K{196}ÓÇº%k%f%b%F{196}ÓÇº.ÓÇº)%k%f%b "

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git:*' use-simple 'true'
zstyle ':vcs_info:git:*' formats ' %r Û∞ä¢ '
# zstyle ':vcs_info:git:*' actionformats ' %r '

__vlkprompt_internal[right_prompt]="%(137V.%k%f%b%F{141}ÓÇæ%k%f%b%K{141}%B%F{232}.)\${vcs_info_msg_0_}"
RPROMPT="${__vlkprompt_internal[right_prompt]}"

# TIMEFMT -- the prompt you see in 'time command --args'
# TIMEFMT="%J  %U user %S system %P cpu %*E total"
TIMEFMT="[48;5;226m[38;5;232m Û±úØ Command: [1m[38;5;232m[48;5;226m%J [49m[39m[0m[38;5;226mÓÇº[49m[39m[0m
[48;5;33m[38;5;255m Û±ëÉ Elapsed time: [1m[38;5;255m[48;5;33m%*E [49m[39m[0m[38;5;33mÓÇº[49m[39m[0m
[48;5;18m[38;5;255m Û∞üÄ user CPU time: [1m[38;5;255m[48;5;18m%U[0m[38;5;255m[48;5;18m, kernel CPU time: [1m[38;5;255m[48;5;18m%S[0m[38;5;255m[48;5;18m (total: [1m[38;5;255m[48;5;18m%P[0m[38;5;255m[48;5;18m) [49m[39m[0m[38;5;18mÓÇº[49m[39m[0m"

SUDO_PROMPT='[48;5;52m[1m[48;5;52m[38;5;255m SUDO [49m[39m[0m[38;5;52m[48;5;196mÓÇº[48;5;196m[1m[38;5;52m[48;5;196m[38;5;255m Please enter your password [49m[39m[0m[38;5;196mÓÉÄ [49m[39m[0m '

PROMPT_EOL_MARK='[48;5;52m[1m[48;5;52m[38;5;255m Û∞åë [49m[39m[0m[38;5;52mÓÇº[49m[39m[0m'

command_not_found_handler() {
    echo "$(tput sgr0)[48;5;196m[1m[48;5;196m[38;5;232m Û∞Öó ERROR [49m[39m[0m[38;5;196m[48;5;52mÓÇº[38;5;255m Command '[1m[38;5;255m[48;5;52m${1:-}[0m[38;5;255m[48;5;52m' not found! [49m[39m[0m[38;5;52mÓÇº[49m[39m[0m"
    return 127
}

__vlkprompt_precmd() {
    local -i timer=$((SECONDS - ${__vlkprompt_internal[old_time]}))
    __vlkprompt_internal[timer_str]=''
    if ((timer > 14)); then
        local leading_zero timedisp timedisp_sm
        if ((timer > 60)); then
            local -i hour=$((timer / 3600))
            local -i min=$(((timer % 3600) / 60))
            local -i sec=$((timer % 60))
            if ((hour > 0)); then
                timedisp="${timedisp}${hour}h "
                timedisp_sm="${timedisp_sm}${hour}:"
                ((min < 10)) && leading_zero=0
            fi
            if ((min > 0)); then
                timedisp="${timedisp}${min}m "
                timedisp_sm="${timedisp_sm}${leading_zero:-}${min}:"
                ((sec < 10)) && leading_zero=0
            fi
            if ((sec > 0)); then
                timedisp="${timedisp}${sec}s "
                timedisp_sm="${timedisp_sm}${leading_zero:-}${sec}:"
            fi
            timedisp="${timedisp%* }"
            timedisp_sm="${timedisp_sm%*:}"
        else
            timedisp="${timer}s"
            timedisp_sm="${timer}"
        fi
        psvar[134]=1
        __vlkprompt_internal[timer_str]="%(130V.${timedisp_sm}.${timedisp})"
    fi

    if [[ $PWD == ${__vlkprompt_internal[pwd]} ]]; then
        psvar[136]="${__vlkprompt_internal[pwd_writable]}"
        psvar[137]="${__vlkprompt_internal[pwd_git]}"
    else
        vcs_info
        if [[ $PWD == ${__vlkprompt_internal[prev_pwd]} ]]; then
            psvar[137]=1
        # elif git status &>/dev/null; then
        elif [[ -n $vcs_info_msg_0_ ]]; then
            __vlkprompt_internal[prev_pwd]="$PWD"
            psvar[137]=1
        elif [[ -w $PWD ]]; then
            psvar[136]=1
        fi
        __vlkprompt_internal[pwd]="$PWD"
        __vlkprompt_internal[pwd_git]="${psvar[137]}"
        __vlkprompt_internal[pwd_writable]="${psvar[136]}"
    fi
    if [[ -n ${CONDA_DEFAULT_ENV:-} ]]; then
        psvar[132]=1
        __vlkprompt_internal[conda_str]="${CONDA_DEFAULT_ENV}"
    fi
    if [[ -n ${VIRTUAL_ENV:-} ]]; then
        psvar[133]=1
        __vlkprompt_internal[venv_str]="${VIRTUAL_ENV##*/}"
    fi
    [[ -n $VIRTUAL_ENV ]] && psvar[133]=1
}

export -U precmd_functions
precmd_functions+=('__vlkprompt_precmd' )

if [[ -z ${DISTROBOX_ENTER_PATH:-} ]]; then
    __vlkprompt_sudo_cmd() {
        if sudo -vn &>/dev/null; then
            psvar[135]=1
        else
            psvar[135]=''
        fi
    }
    precmd_functions+=('__vlkprompt_sudo_cmd')
fi

# function zle-line-init zle-keymap-select
__vlkprompt-zle-keymap-select() {
    if [[ $KEYMAP == vicmd ]]; then
        psvar[138]=1
    else
        psvar[138]=
    fi
    zle reset-prompt
}
zle -N zle-keymap-select __vlkprompt-zle-keymap-select


__vlkprompt-zle-line-init() {
    [[ $CONTEXT == start ]] || return 0
    (($+zle_bracketed_paste)) && print -r -n - "${zle_bracketed_paste[1]}"
    zle recursive-edit
    local -i ret=$?
    (($+zle_bracketed_paste)) && print -r -n - "${zle_bracketed_paste[2]}"
    if [[ $ret == 0 && $KEYS == $'\4' ]]; then
        psvar[130]=1
        zle reset-prompt
        exit
    fi
    local has_sudo="${psvar[135]}"
    psvar[130]=1
    RPROMPT=
    zle reset-prompt
    psvar=()
    psvar[135]="$has_sudo"
    __vlkprompt_internal[old_time]=$SECONDS
    __vlkprompt_internal[timer_str]=
    RPROMPT="${__vlkprompt_internal[right_prompt]}"
    if ((ret)); then
        zle send-break
    else
        zle accept-line
    fi
    return ret
}

zle -N zle-line-init __vlkprompt-zle-line-init

return
