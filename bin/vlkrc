#!/usr/bin/bash
# shellcheck shell=bash
# vim:foldmethod=marker:ft=sh
# shellcheck disable=SC2139

if ! [[ 1 ]] 2>/dev/null || [[ "$-" != *i* ]] 2>/dev/null; then
    echo "Error, you must source this file with interactive zsh or bash" >&2
    return 1 2>/dev/null
    exit 1
fi

# the following are just some random notes :3

# bash feature test: [[ 1 ]] 2>/dev/null
# zsh feature test: ( true "${(q)0}" ) 2>/dev/null

# sudo virsh console fedora38-server #username: root, password: root
# distrobox-create --name ARCH --image archlinux:latest
[ -f "$HOME/.xsel.log" ] && rm "$HOME/.xsel.log" &>/dev/null

__homebin="$HOME/bin"

# hardcoded path
__lscmd="$(/bin/which --skip-alias ls)"
__lsargs='--color=auto --group-directories-first'

if command -v lsd &>/dev/null; then
    alias ls=lsd
    alias ll='lsd -l'

    alias tree='lsd --tree'
else
    alias ls="$__lscmd $__lsargs -A"
    alias ll="$__lscmd $__lsargs -Al"

    if /bin/which --skip-alias tree &>/dev/null; then
        true
    else
        alias tree="$__lscmd $__lsargs -AR"
    fi
fi

alias la="$__lscmd $__lsargs -A"
alias lah="$__lscmd $__lsargs -AFsh"

unset __lscmd __lsargs

alias sl=ls
alias l=ls
alias s=ls

alias -- -='cd -'

alias ...='cd ../..'
alias ....='cd ../../..'

alias pw=pwd

rp() {
    if [ -z "${1:-}" ]; then
        realpath "$PWD"
    else
        local i
        for i in "$@"; do
            realpath "$i"
        done
    fi
}

if command -v doas &>/dev/null; then
    alias sudo='doas --'
fi
alias suod=sudo

alias q=exit
alias :q=exit

# session_end() {
#     local selected="${1:?Error, please select a session ending option}"
#     echo -n "[${selected}]Do you really want to end your session? [y/N] (n) > "
#     local answer
#     read -r answer
#     if [[ "${answer:-}" == 'y' ]]; then
#         case "${selected:-}" in
#         'shutdown')
#             systemctl poweroff
#             ;;
#         'reboot')
#             systemctl reboot
#             ;;
#         'logout')
#             loginctl kill-session "${XDG_SESSION_ID}"
#             ;;
#         esac
#     fi
# }

# alias shutdown='session_end shutdown'
# alias reboot='session_end reboot'
# alias restart='session_end reboot'
# alias logout='session_end logout'

alias shutdown='systemctl poweroff'
alias reboot='systemctl reboot'
alias logout="loginctl kill-session '$XDG_SESSION_ID'"

__rmcmd="$(/bin/which --skip-alias rm)"

alias fuck="$__rmcmd -rf"
alias frick='trash -fvi'
alias rmf="$__rmcmd -rf"
alias rm='trash -i -r'

unset __rmcmd

alias touchc="$__homebin/touchx.sh --codium"
alias touchv="$__homebin/touchx.sh --nvim"
alias touchx="$__homebin/touchx.sh --exec"
alias touchxc="$__homebin/touchx.sh --exec --codium"
alias touchxv="$__homebin/touchx.sh --exec --nvim"

alias chmodx='chmod +x'
alias chmod-x='chmod -x'

alias %="$__homebin/\$"

alias copy="$__homebin/copy"
alias copycat="$__homebin/copy --cat"

alias grep='/usr/bin/grep --color=auto'
alias egrep='/usr/bin/egrep --color=auto'
alias igrep='/usr/bin/grep -i --color=auto'

alias mime='file -bL --mime-type'

alias bap='bat --paging always'
alias glop='glow --pager'
alias batop=battop
alias battio=battop

alias ytmp3="yt-dlp --extract-audio --audio-format mp3 "
alias ytmp4="yt-dlp -f bestvideo+bestaudio --sponsorblock-remove sponsor --progress --remux-video mp4 "

if [[ "${TERM:-}" == *'kitty'* ]]; then
    alias icat='kitten icat'
elif command -v timg &>/dev/null; then
    alias icat=timg
elif command -v chafa &>/dev/null; then
    alias icat=chafa
fi

if command -v difft &>/dev/null; then
    alias diff=difft
fi
if command -v duf &>/dev/null; then
    alias df=duf
fi
if command -v dust &>/dev/null; then
    alias du=dust
fi
# if command -v ouch &>/dev/null; then
#     alias extract='ouch decompress'
# fi

alias unfuck-old-backup='tar --hole-detection=seek --keep-directory-symlink -xzf '
alias extract='ouch decompress'

alias free='free -h'

alias ra=ranger

alias fr='flatpak run'
alias whihc=which

#alias startx='startx "$XINITRC"'
alias wget='wget --show-progress'

alias bg-gen='convert +append -resize x1080'
alias ttymouse='sudo gpm -m /dev/input/mice -t imps2'

alias code=codium

alias vi="$EDITOR"
#alias vim='$EDITOR'
alias ivm="$EDITOR"
alias iv="$EDITOR"
alias v="$EDITOR"
alias svim=sudoedit

alias tmuxk='tmux kill-session -t'
alias tmuxa='tmux attach -t'
alias tmuxl='tmux list-sessions'

alias bash="$__homebin/run-subshell.sh bash"
alias dash="$__homebin/run-subshell.sh dash"
alias ksh="$__homebin/run-subshell.sh ksh"
alias rksh=ksh
alias sh="$__homebin/run-subshell.sh sh"
alias csh="echo ðŸ’€ && $__homebin/run-subshell.sh csh"
alias tcsh="echo ðŸ’€ && $__homebin/run-subshell.sh tcsh"

alias pypip="pypy3 -m pip "

alias pnpmi='pnpm install --global'
alias pnpml='pnpm list --global | fzf'

alias tc='tsc && node .'

alias gitm='git add -A && git commit -am "$(date +"Commit from shell alias at %D %r")" '
alias gitp='git pull '
alias tit='echo ðŸ˜œ && git '
alias gitd='git fetch && git diff "origin/$(git branch | grep -oP "\*[[:space:]]*\K.*\$")"'
alias uncommit='git reset --soft HEAD~'

dotfiles_git_interact() {
    if [ ! -d "${HOMESCRIPTS:-}" ]; then
        echo "Error, directory '${HOMESCRIPTS:-}' does not exist!"
        return 1
    fi
    local current_dir="$PWD"
    cd "$HOMESCRIPTS" &>/dev/null || return 1
    case "${1:-}" in
    'm') gitm ;;
    'p') git push ;;
    'd') gitd ;;
    *) echo 'Error, please specify a git action to take on dotfiles' ;;
    esac
    cd "$current_dir" &>/dev/null || return 1
}

alias dotm='dotfiles_git_interact m'
alias dotp='dotfiles_git_interact p'
alias dotd='dotfiles_git_interact d'

alias cr='cargo run -- '
alias cbr='cargo build --release'
alias cupl='cargo install-update -l'

alias dfn=dnf

alias dnfi='sudo dnf install '
alias dfni=dnfi

alias dnfr='sudo dnf remove '
alias dfnr=dnfr

alias dnfu='sudo dnf update --refresh'
alias dfnu=dnfu

#alias dnfs="dnf search "
alias dfns=dnfs

alias dnfl='dnf list --installed | fzf'
alias dfnl=dnfl

alias dnfa='dnf list --available | fzf'
alias dfna=dnfa

alias dnfc='dnf check-update'
alias dfnc=dnfc

alias fli='flatpak install'
alias flu='flatpak update'
alias fls='flatpak search'

alias fll='flatpak list | fzf'
alias flc='flatpak remote-ls --updates'

alias unfuck-pacman-cache="sudo pacman -Qk | grep '[^0] missing files'"
alias pmi='sudo pacman -S '
alias pmr='sudo pacman -Rcns '

alias xclassget='xprop | grep WM_CLASS'
alias xkeyget="xev -event keyboard | grep -Eo 'keycode.*\)'"

alias numlock-query="xset q | grep -Po 'Num Lock: *\K[a-z]*'"

alias gpu=switcherooctl

alias winekill="killall winedevice.exe; killall wineserver"
alias winelist="ps -eo args | grep 'C:[/|\\]' | grep -o '^.*\.exe '"
alias ubikill='killall upc.exe; killall UbisoftGameLauncher.exe'

alias steamfix='find "$HOME/.var/app/com.valvesoftware.Steam/.config" -maxdepth 1 -type l -delete'

alias touchpad-gaming='xinput set-prop $(xinput | grep -oP "Touchpad\s*id=\K[0-9]*") "libinput Disable While Typing Enabled" 0'

alias font-reset='fc-cache -fv'
alias font-search="fc-list --format='%{family}\t%{style}\n' | sort | uniq | fzf"

alias pipl='pip list | fzf'

alias hr='printf "%*s\n" "${COLUMNS:-$(tput cols)}" "" | tr " " -'

alias ARCH='distrobox-enter -n ARCH'
if [ -n "${ZSH_VERSION:-}" ]; then
    alias refresh='exec zsh'
    alias uncompile="recompile.zsh --uncompile"
    alias lsh="hash -dL | sed 's/hash -d //g ; s/=/  \t  /g' | fzf"
    #alias ARCH='distrobox-enter -n ARCH -- /usr/bin/zsh'
    alias aliases='printf "\e[1;93m%s\e[0m = \e[92m%s\e[0m\n" "${(@kv)aliases}"'
    alias fenv='typeset | fzf'

elif [ -n "${BASH_VERSION:-}" ]; then
    alias refresh='exec bash'
    #alias ARCH='distrobox-enter -n ARCH -- /usr/bin/bash'
    alias fenv='printenv | fzf'
fi

case "${CURRENT_DISTRO:-}" in
'Arch')
    alias grubcfg='sudo grub-mkconfig -o /boot/grub/grub.cfg'
    ;;
'Fedora')
    alias grubcfg='sudo grub2-mkconfig -o /etc/grub2.cfg'
    ;;
esac

mkcd() {
    local directory="${1:?Error, please choose a directory name!}"
    directory="$(realpath -m "$directory")"
    local dircolor="${LS_COLORS##*:di=}"
    dircolor="${dircolor%%:*}"
    dircolor="${dircolor:-1;94}"

    if mkdir -p "$directory"; then
        echo "made dir $directory"
        cd "$directory" && printf '\033[92m+\033[0m \033[%sm%s\033[0m' "$dircolor" "$directory"
    else
        return 1
    fi
}

gitc() {
    local git_link="${1?:Error. Specify link to clone}"
    local git_dir="$PWD/${git_link##*/}"
    if [ "$PWD" = "$HOME" ]; then
        echo "Error: don't clone a git file to '$PWD'!"
        return 1
    fi
    echo -e "Cloning \033[4m$git_link\033[0m î‚ "
    git clone "$git_link"
    cd "${git_dir%.git}"
}

readme() {
    local readmecmd
    if command -v 'glow' &>/dev/null; then
        readmecmd='glow'
    elif command -v 'bat' &>/dev/null; then
        readmecmd='bat'
    else
        readmecmd='cat'
    fi
    $readmecmd "$(printf '%s\n' ./* | grep -i 'readme' | fzf --select-1)"
}

dotadd() {
    local dotfolder="${1:?Error, please choose a folder!}"
    dotfolder="$(realpath -e "$dotfolder")"
    [ -e "$dotfolder" ] || return 1

    local linkfolder
    case "$dotfolder" in
    "$HOME/"*)
        linkfolder="$HOMESCRIPTS/${dotfolder//$HOME/}"
        ;;
    *)
        linkfolder="$HOMESCRIPTS/disk-root${dotfolder}"
        ;;
    esac
    mkdir -p "${linkfolder%/*}"
    mv "$dotfolder" "$linkfolder"
    ln -s "$linkfolder" "$dotfolder"
}

fzfify() {
    : "${1:?Error, please enter a list of stuff to fzfify!}"
    printf '%s\n' "$@" | fzf
}

keyring() {
    if pgrep 'gnome-keyring-d' &>/dev/null; then
        busctl --user get-property 'org.gnome.keyring' \
            '/org/freedesktop/secrets/collection/login' \
            'org.freedesktop.Secret.Collection' \
            'Locked' | sed 's/^b //g'
    else
        echo "Error, gnome-keyring-daemon doesn't seem to be running!"
        return 1
    fi
}

unset __homebin
