#!/usr/bin/bash
# shellcheck shell=bash
# vim:foldmethod=marker:ft=sh
## shellcheck disable=2139,2317,2012,1090

[[ "$-" == *i* ]] || {
    echo "Error, you must source this file with interactive zsh or bash" >&2
    return 1
    exit 1
}

: "${DIRECTORY_COLOR:=1;34}"
if ! command -v cargo &>/dev/null; then
    alias getcargo='bash <(curl -sSf https://sh.rustup.rs) --default-toolchain stable --profile complete --no-modify-path'
    echo "No cargo found. Please run 'getcargo'"
fi

#__which="$(which --skip-alias which)"
__which() {
    local which_output
    which_output="$(
        (
            alias
            declare -f
        ) |
            "${WHICH_PATH:-/bin/which}" --tty-only --read-alias --read-functions --show-tilde --show-dot "$@"
    )"
    echo "$which_output" | sed "s|^$HOME|~|"
    if [[ -L "${which_output:-}" ]]; then
        echo -e "symlink to \e[1;96m$(realpath "$which_output")\e[0m"
    fi
}
# alias which="( alias; declare -f ) | ${WHICH_PATH:=/bin/which} --tty-only --read-alias --read-functions --show-tilde --show-dot"
alias which=__which
alias whihc=which

__homebin="$HOME/bin"

__lscmd="${LS_PATH:=/bin/ls} --color=auto --group-directories-first -A"

alias ls="${LS_COMMAND:=$__lscmd}"
alias ll="${LL_COMMAND:=$__lscmd -l}"
alias la="${LA_COMMAND:=$__lscmd}"

unset __lscmd

alias sl=ls
alias l=ls
alias s=ls

unalias cd 2>/dev/null
alias -- -='cd -'

alias ...='cd ../..'
alias ....='cd ../../..'

alias pw=pwd

rp() {
    if [[ -z "${1:-}" ]]; then
        realpath "$PWD"
    else
        local i
        for i in "$@"; do
            realpath "$i"
        done
    fi
}

alias cp='cp -r'

alias suod=sudo

alias q=exit
alias :q=exit

alias shutdown='systemctl poweroff'
alias reboot='systemctl reboot'
alias logout="loginctl kill-session '$XDG_SESSION_ID'"

alias rmf="${RM_PATH:=/bin/rm} -rf"
if command -v trash &>/dev/null; then
    alias rm='trash -i -r'
else
    echo "trash command not installed! falling back to '$RM_PATH'"
    alias rm=rmf
fi
# remove junk files
for i in \
    "$HOME/.xsel.log" \
    "$HOME/.wget-hsts"; do
    [[ -e "$i" ]] && rmf "$i"
done
#[[ -f "$HOME/.xsel.log" ]] && rmf "$HOME/.xsel.log" &>/dev/null

alias touchc="$__homebin/touchx.sh --codium"
alias touchv="$__homebin/touchx.sh --nvim"
alias touchx="$__homebin/touchx.sh --exec"
alias touchxc="$__homebin/touchx.sh --exec --codium"
alias touchxv="$__homebin/touchx.sh --exec --nvim"

alias chmodx='chmod +x'
alias chmod-x='chmod -x'

alias %="$__homebin/\$"

alias copy="$__homebin/copy"
alias copycat="$__homebin/copy --cat"

alias ple='perl -wlne '

alias grep="grep --color=auto"
alias egrep="egrep --color=auto"
alias fgrep="fgrep --color=auto"
alias igrep="grep -i --color=auto"

alias xzgrep='xzgrep --color=auto'
alias xzegrep='xzegrep --color=auto'
alias xzfgrep='xzfgrep --color=auto'

alias zgrep='zgrep --color=auto'
alias zfgrep='zfgrep --color=auto'
alias zegrep='zegrep --color=auto'

alias mime='file -bL --mime-type'

alias bap='bat --paging always'
alias glop='glow --pager'
alias batop=battop
alias battio=battop

# OpenAI whisper -- run `pip install --user --upgrade --no-deps --force-reinstall git+https://github.com/openai/whisper.git` and `pip install --user blobfile`
#command -v whisper &>/dev/null && alias whisp='whisper --language en --device cuda --model medium.en --output_format txt'
alias record='pw-record --target "alsa_input.usb-ASUSTeK_COMPUTER_INC._C-Media_R__Audio-00.analog-stereo" '

whisp() {
    conda activate whisp
    echo "starting whisper with args '--language en --device cuda --model medium.en --output_format txt $*'"
    whisper --language en --device cuda --model medium.en --output_format txt "$@"
    conda deactivate
}

if [[ -d "$HOME/src/text-generation-webui" ]]; then
    llama() {
        local oldpwd="$PWD"
        cd "$HOME/src/text-generation-webui" || return 1
        conda activate textgen
        python3 ./server.py --chat-buttons --model 'llama-2-13b-chat.Q5_K_M.gguf' --character 'Bob, the real boy'
        conda deactivate
        cd "$oldpwd" || return 1
    }
    alias textgen=llama
fi
#alias llama="cd $HOME/src/text-generation-webui && conda run -vvv -n textgen python ./server.py"

alias download='curl -sfLO '
alias ytmp3="yt-dlp --extract-audio --audio-format mp3 "
alias ytmp4="yt-dlp -f bestvideo+bestaudio --sponsorblock-remove sponsor --progress --remux-video mp4 "

if [[ "${TERM:-}" == *'kitty'* ]]; then
    alias icat='kitten icat'
else
    alias icat=chafa
fi

alias diff=difft
# command -v duf &>/dev/null && alias df=duf
command -v dutree &>/dev/null && alias du=dutree
# command -v ouch &>/dev/null && alias extract='ouch decompress'

alias unfuck-old-backup='tar --hole-detection=seek --keep-directory-symlink -xzf '

alias free='free -h'

alias ra=ranger

alias fr='flatpak run'
alias fps='flatpak ps'

alias wget='wget --show-progress'

alias bg-gen='convert +append -resize x1080'
alias ttymouse='sudo gpm -m /dev/input/mice -t imps2'

alias code=codium

alias vi="$EDITOR"
# alias vim="$EDITOR"
alias ivm="$EDITOR"
alias iv="$EDITOR"
alias v="$EDITOR"
alias svim=sudoedit

alias tmuxk='tmux kill-session -t'
alias tmuxa='tmux attach -t'
alias tmuxl='tmux list-sessions'

run-subshell() {
    local stty cmd
    [[ -t 0 ]] && stty="$(stty --save)"
    # local myhist="$HISTFILE"
    cmd="${1:-}"
    command -v "$cmd" >/dev/null || return
    shift 1
    HISTFILE="${SHELLHIST:-/dev/null}" $cmd "$@"
    local -i retval="$?"
    [[ -n ${stty:-} ]] && stty "$stty"
    return $retval
}

# alias bash="$__homebin/run-subshell.sh bash"
alias bash='run-subshell bash'
alias dash="run-subshell dash"
alias ksh="run-subshell ksh"
alias rksh=ksh
alias sh="run-subshell sh"
alias csh="echo ðŸ’€ && run-subshell csh"
alias tcsh="echo ðŸ’€ && run-subshell tcsh"

alias pypip="pypy3 -m pip "

venv() {
    local venv="$PWD/venv"
    local venvb="$venv/bin/activate"
    if [[ -f "$venvb" ]]; then
        source "$venvb"
    else
        python -m venv "$venv"
        if [[ -f "$venvb" ]]; then
            source "$venvb"
        else
            echo "Error, failed to find python venv"
            return 1
        fi
    fi
}
# alias venv='python -m venv "$PWD"'

alias pnpmi='pnpm install --global'
alias pnpml='pnpm list --global | fzf'

alias tc='tsc && node .'

alias gitm='git add -A && git commit -am "$(date +"Commit from shell alias at %D %r")" '
alias gitp='git pull '
alias tit='echo ðŸ˜œ && git '
alias gitd='git fetch && git diff "origin/$(git branch | grep -oP "\*[[:space:]]*\K.*\$")"'
alias uncommit='git reset --soft HEAD~'

alias dotm="$__homebin/dotfiles.sh --git commit"
alias dotp="$__homebin/dotfiles.sh --git push"
alias dotd="$__homebin/dotfiles.sh --git diff"
alias dotadd="$__homebin/dotfiles.sh --dotadd"

alias cr='cargo run -- '
alias cbr='cargo build --release'
cn() {
    local projname="${1:?Error, please enter a project name!}"
    echo -n "Press ENTER to create a new Rust program '$projname' in this directory"
    local ans
    read -r ans
    [[ $ans == '' ]] || return
    cargo new "$projname" || return
    builtin cd "$PWD/$projname" || return
    codium ./
}
alias cupl='cargo install-update -l'

alias dfn=dnf

alias dnfi='sudo dnf install '
alias dfni=dnfi

alias dnfr='sudo dnf remove '
alias dfnr=dnfr

alias dnfu='sudo dnf update --refresh'
alias dfnu=dnfu

command -v dnfs &>/dev/null || alias dnfs="dnf search "
alias dfns=dnfs

alias dnfl='dnf list --installed | fzf'
alias dfnl=dnfl

alias dnfa='dnf list --available | fzf'
alias dfna=dnfa

alias dnfc='dnf check-update'
alias dfnc=dnfc

alias fli='flatpak install'
alias flu='flatpak update'
alias fls='flatpak search'

alias fll='flatpak list | fzf'
alias flc='flatpak remote-ls --updates'

alias unfuck-pacman-cache="sudo pacman -Qk | grep '[^0] missing files'"
alias pmi='sudo pacman -S '
alias pmr='sudo pacman -Rcns '

alias xclassget='xprop | grep WM_CLASS'
alias xkeyget="xev -event keyboard | grep -Eo 'keycode.*\)'"
alias numlock-query="xset q | grep -Po 'Num Lock: *\K[a-z]*'"

alias gpu=switcherooctl

alias winekill="killall winedevice.exe; killall wineserver"
alias winelist="ps -eo args | grep 'C:[/|\\]' | grep -o '^.*\.exe '"
alias ubikill='killall upc.exe; killall UbisoftGameLauncher.exe'

alias steamfix='find "$HOME/.var/app/com.valvesoftware.Steam/.config" -maxdepth 1 -type l -delete'

alias touchpad-gaming='xinput set-prop $(xinput | grep -oP "Touchpad\s*id=\K[0-9]*") "libinput Disable While Typing Enabled" 0'

alias font-reset='fc-cache -fv'
alias font-search="fc-list --format='%{family}\t%{style}\n' | sort | uniq | fzf"

alias pipl='pip list | fzf'
alias printfn="printf '%s\n' "

alias hr='printf "%*s\n" "${COLUMNS:-$(tput cols)}" "" | tr " " -'
alias chars='perl -e "foreach(@ARGV){open(my \$f,\"<\",\"\$_\") or die \"\$!\";my \$c;while(read(\$f,\$c,1)){print \"\$c\n\";}close \$f;}" '

alias ARCH='distrobox-enter -n ARCH'

alias fenv='declare | fzf'

if [[ -n "${ZSH_VERSION:-}" ]]; then
    alias refresh='exec zsh'
    alias lsh="hash -dL | sed 's/hash -d //g ; s/=/  \t  /g' | fzf"
    alias aliases='printf "\e[1;93m%s\e[0m = \e[92m%s\e[0m\n" "${(@kv)aliases}"'

elif [[ -n "${BASH_VERSION:-}" ]]; then
    alias refresh='exec bash'
fi

if command -v grub2-mkconfig &>/dev/null; then
    alias grubcfg='sudo grub2-mkconfig -o /etc/grub2.cfg'
elif command -v grub-mkconfig &>/dev/null; then
    alias grubcfg='sudo grub-mkconfig -o /boot/grub/grub.cfg'
fi

unset __homebin

gitc() {
    if [[ "$PWD" == "$HOME" ]]; then
        echo "Error: don't clone a git repo to '$PWD'!"
        return 1
    fi
    local git_link="${1?:Error. Specify link to clone}"
    local git_dir="$PWD/${git_link##*/}"
    echo -e "Cloning \033[4m$git_link\033[0m î‚ "
    git clone "$git_link"
    cd "${git_dir%.git}" || return 1
}

readme() {
    : "${1:=$(printf '%s\n' ./* | grep -i 'readme' | fzf --select-1)}"
    if command -v 'glow' &>/dev/null; then
        glow "$1"
    elif command -v 'bat' &>/dev/null; then
        bat "$1"
    else
        cat "$1"
    fi
}
