#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

panic() {
    printf '%s\n' "$@" >&2
    exit 1
}

declare -A pth
pth[gtk2]="${GTK2_RC_FILES:-$HOME/.gtkrc-2.0}"
pth[gtk3]="${XDG_CONFIG_HOME:-$HOME/.config}/gtk-3.0/settings.ini"
pth[gtk4]="${XDG_CONFIG_HOME:-$HOME/.config}/gtk-4.0/settings.ini"
pth[font]="${XDG_CONFIG_HOME:-$HOME/.config}/fontconfig/fonts.conf"
pth[curs]="${XDG_DATA_HOME:-$HOME/.local/share}/icons/default/index.theme"
pth[xset]="${XDG_CONFIG_HOME:-$HOME/.config}/xsettingsd/xsettingsd.conf"

for i in "${pth[@]}"; do
    mkdir -p "${i%/*}"
done

gen_comment="generated by ${0} on $(date +'%D @ %r')"

declare -a fonts_serif fonts_sans fonts_mono
# "Comic Sans MS"
fonts_sans=(
    "SF Pro Display"
    "Noto Sans Math"
    "Symbols Nerd Font"
)
fonts_serif=(
    "Times New Roman"
    "Noto Sans Math"
    "Symbols Nerd Font"
)
fonts_mono=(
    "FiraCode Nerd Font"
    "Symbols Nerd Font"
)

font_size=11

declare -A cursor xft
cursor[theme]='GoogleDot-Purple'
cursor[size]=24

xft[antialias]=1
xft[hinting]=1
xft[hintstyle]='hintmedium'
xft[rgba]='rgb'

declare -A gtk2 gtk3 gtk4

_gtk_setprop() { # clean this up later
    local key="$1"
    local init_value="$2"
    local value="$init_value"
    shift 2
    for i in "$@"; do
        if ((i == 2)); then
            # echo "${value:0:4}"
            case "${value:0:4}" in
            'GTK_'*)
                value="$init_value"
                ;;
            [a-z,A-Z]*)
                value="\"$value\""
                ;;
            esac
        else
            value="$init_value"
        fi
        echo "gtk${i}[$key]='$value'"
        #declare "gtk${i}[$key]=$value"
    done
}

eval "$(
    _gtk_setprop 'cursor-theme-name' "${cursor[theme]}" 2 3 4
    _gtk_setprop 'cursor-theme-size' "${cursor[size]}" 2 3 4

    _gtk_setprop 'application-prefer-dark-theme' 'true' 3
    _gtk_setprop 'theme-name' 'adw-gtk3-dark' 3 4
    _gtk_setprop 'theme-name' 'Raleigh' 2
    _gtk_setprop 'icon-theme-name' 'Newaita-reborn-deep-purple-dark' 3 4
    _gtk_setprop 'icon-theme-name' 'Adwaita' 2

    _gtk_setprop "font-name" "sans-serif $font_size" 2 3 4
    _gtk_setprop 'xft-antialias' "${xft[antialias]}" 2 3 4
    _gtk_setprop 'xft-hinting' "${xft[hinting]}" 2 3 4
    _gtk_setprop 'xft-hintstyle' "${xft[hintstyle]}" 2 3 4
    _gtk_setprop 'xft-rgba' "${xft[rgba]}" 2 3 4

    # decoration layout can be menu:minimize,maximize,close
    _gtk_setprop 'decoration-layout' 'menu:close' 3 4
    _gtk_setprop 'toolbar-style' 'GTK_TOOLBAR_BOTH' 2 3
    _gtk_setprop 'toolbar-icon-size' 'GTK_ICON_SIZE_LARGE_TOOLBAR' 2 3
    _gtk_setprop 'button-images' '1' 2 3
    _gtk_setprop 'menu-images' '1' 2 3

    _gtk_setprop 'enable-event-sounds' '0' 2 3 4
    _gtk_setprop 'enable-input-feedback-sounds' '0' 2 3 4
)"

# typeset -p gtk2

_set_gtk2() {
    (
        echo "# $gen_comment"
        for i in "${!gtk2[@]}"; do
            printf "gtk-%s=%s\n" "$i" "${gtk2[$i]}"
        done
    ) >"${pth[gtk2]}"
}

_set_gtk3() {
    (
        echo "# $gen_comment"
        echo '[Settings]'
        for i in "${!gtk3[@]}"; do
            printf "gtk-%s=%s\n" "$i" "${gtk3[$i]}"
        done
    ) >"${pth[gtk3]}"
}

_set_gtk4() {
    (
        echo "# $gen_comment"
        echo '[Settings]'
        for i in "${!gtk4[@]}"; do
            printf "gtk-%s=%s\n" "$i" "${gtk4[$i]}"
        done
    ) >"${pth[gtk4]}"
}

_set_fontconfig() {
    (
        if ((${xft[antialias]} == 1)); then
            antialiasing=true
        else
            antialiasing=false
        fi
        if ((${xft[hinting]} == 1)); then
            hinting=true
        else
            hinting=false
        fi
        # printf '%s\n' \
        #     '<?xml version="1.0"?>' \
        #     '<!DOCTYPE fontconfig SYSTEM "fonts.dtd">' \
        #     "<!--${gen_comment}-->" \
        #     '<fontconfig>' \
        #     '    <match target="font">' \
        #     '        <edit name="antialias" mode="assign">' \
        #     "            <bool>${antialiasing}</bool>" \
        #     '        </edit>' \
        #     '        <edit name="hinting" mode="assign">' \
        #     "            <bool>${hinting}</bool>" \
        #     '        </edit>' \
        #     '        <edit name="hintstyle" mode="assign">' \
        #     "            <const>${xft[hintstyle]}</const>" \
        #     '        </edit>' \
        #     '        <edit name="rgba" mode="assign">' \
        #     "            <const>${xft[rgba]}</const>" \
        #     '        </edit>' \
        #     '    </match>' \
        #     '    <alias>' \
        #     '        <family>sans-serif</family>' \
        #     '        <prefer>' \
        #     "$(printf '            <family>%s</family>\n' "${fonts_sans[@]}")" \
        #     '        </prefer>' \
        #     '    </alias>' \
        #     '    <alias>' \
        #     '        <family>serif</family>' \
        #     '        <prefer>' \
        #     "$(printf '            <family>%s</family>\n' "${fonts_serif[@]}")" \
        #     '        </prefer>' \
        #     '    </alias>' \
        #     '    <alias>' \
        #     '        <family>monospace</family>' \
        #     '        <prefer>' \
        #     "$(printf '            <family>%s</family>\n' "${fonts_mono[@]}")" \
        #     '        </prefer>' \
        #     '    </alias>' \
        #     '</fontconfig>'
        cat <<EOF
<?xml version="1.0"?>
    <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
    <!--${gen_comment}-->
    <fontconfig>
        <match target="font">
            <edit name="antialias" mode="assign">
                <bool>${antialiasing}</bool>
            </edit>
            <edit name="hinting" mode="assign">
                <bool>${hinting}</bool>
            </edit>
            <edit name="hintstyle" mode="assign">
                <const>${xft[hintstyle]}</const>
            </edit>
            <edit name="rgba" mode="assign">
                <const>${xft[rgba]}</const>
            </edit>
        </match>
        <match target="pattern">
            <test qual="any" name="family"><string>emoji</string></test>
            <edit name="family" mode="assign" binding="same"><string>Apple Color Emoji</string></edit>
        </match>
        <!-- This adds Apple Color Emoji as a final fallback font for the default font families. -->
        <match target="pattern">
            <test name="family"><string>sans</string></test>
            <edit name="family" mode="append"><string>Apple Color Emoji</string></edit>
        </match>
        <match target="pattern">
            <test name="family"><string>serif</string></test>
            <edit name="family" mode="append"><string>Apple Color Emoji</string></edit>
        </match>
        <match target="pattern">
            <test name="family"><string>sans-serif</string></test>
            <edit name="family" mode="append"><string>Apple Color Emoji</string></edit>
        </match>
        <match target="pattern">
            <test name="family"><string>monospace</string></test>
            <edit name="family" mode="append"><string>Apple Color Emoji</string></edit>
        </match>
        <alias>
            <family>sans-serif</family>
            <prefer>
    $(printf '            <family>%s</family>\n' "${fonts_sans[@]}")
            </prefer>
        </alias>
        <alias>
            <family>serif</family>
            <prefer>
    $(printf '            <family>%s</family>\n' "${fonts_serif[@]}")
            </prefer>
        </alias>
        <alias>
            <family>monospace</family>
            <prefer>
    $(printf '            <family>%s</family>\n' "${fonts_mono[@]}")
            </prefer>
        </alias>
    </fontconfig>
EOF
    ) >"${pth[font]}"
}

_set_cursor_theme() {
    printf '%s\n' \
        '[Icon Theme]' \
        "Inherits=${cursor[theme]}" \
        "# $gen_comment" >"${pth[curs]}"

}

_set_gsettings() {
    local gset
    local gsettings_path='org.gnome.desktop.interface'
    gset="$(
        local gsettingskey
        local val
        for i in "${!gtk3[@]}"; do
            val="${gtk3[$i]}"
            case "$i" in
            'cursor-theme-name')
                gsettingskey='cursor-theme'
                ;;
            'cursor-theme-size')
                gsettingskey='cursor-size'
                ;;
            'application-prefer-dark-theme')
                if [[ "$val" = true ]]; then
                    val='prefer-dark'
                else
                    val=''
                fi
                gsettingskey='color-scheme'
                ;;
            'theme-name')
                gsettingskey='gtk-theme'
                ;;
            'icon-theme-name')
                gsettingskey='icon-theme'
                ;;
            'xft-antialias')
                gsettingskey='font-antialiasing'
                val='grayscale'
                ;;
            'xft-hintstyle')
                gsettingskey='font-hinting'
                val="${val/hint/}"
                ;;
            'xft-rgba')
                gsettingskey='font-rgba-order'
                ;;
            # 'decoration-layout')
            #     gsettingskey='button-layout'
            #     gsettings_path='org.gnome.desktop.wm.preferences'
            #     ;;
            *)
                continue
                ;;
            esac
            printf "'%s' '%s'\n" "$gsettingskey" "$val"

        done
        printf "'%s' '%s'\n" 'font-name' "sans-serif $font_size"
        printf "'%s' '%s'\n" 'document-font-name' "sans-serif $font_size"
        printf "'%s' '%s'\n" 'monospace-font-name' "monospace $font_size"
    )"

    local IFS=$'\n'
    for i in $gset; do
        eval "gsettings set '$gsettings_path' $i"
    done
}

_set_xsettingsd() {
    local key
    local val
    local init_val
    (
        echo "# $gen_comment"
        for i in "${!gtk3[@]}"; do
            init_val="${gtk3[$i]}"
            val="$init_val"
            case "${i}" in
            'xft-hinting')
                key='Xft/Hinting'
                ;;
            'menu-images')
                key='Gtk/MenuImages'
                ;;
            'xft-rgba')
                key='Xft/RGBA'
                ;;
            'button-images')
                key='Gtk/ButtonImages'
                ;;
            'xft-hintstyle')
                key='Xft/HintStyle'
                ;;
            'decoration-layout')
                key='Gtk/DecorationLayout'
                ;;
            'enable-event-sounds')
                key='Net/EnableEventSounds'
                ;;
            'xft-antialias')
                key='Xft/Antialias'
                ;;
            'cursor-theme-name')
                key='Gtk/CursorThemeName'
                ;;
            'theme-name')
                key='Net/ThemeName'
                ;;
            'font-name')
                key='Gtk/FontName'
                ;;
            #'toolbar-icon-size')
            #    key='Gtk/ToolbarIconSize'
            #    ;;
            'icon-theme-name')
                key='Net/IconThemeName'
                ;;
            #'toolbar-style')
            #    key='Gtk/ToolbarStyle'
            #    ;;
            'enable-input-feedback-sounds')
                key='Net/EnableInputFeedbackSounds'
                ;;
            *)
                continue
                ;;
            esac
            case "${val:0:4}" in
            'GTK_'*)
                val="$init_val"
                ;;
            [a-z,A-Z]*)
                val="\"$val\""
                ;;
            esac
            echo "$key $val"
        done
    ) >"${pth[xset]}"
}

_set_gtk2
_set_gtk3
_set_gtk4
_set_fontconfig
_set_cursor_theme
_set_gsettings
_set_xsettingsd
